"""empty message

Revision ID: 6023cc04d9d2
Revises: 
Create Date: 2024-12-19 10:42:48.458308

"""
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "6023cc04d9d2"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "gh_organization",
        sa.Column("avatar_url", sa.String(length=255), nullable=True),
        sa.Column("login", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("html_url", sa.String(length=255), nullable=True),
        sa.Column("repos_url", sa.String(length=255), nullable=True),
        sa.Column("default_repository_permission", sa.String(length=255), nullable=True),
        sa.Column("events_url", sa.String(length=255), nullable=True),
        sa.Column("members_can_create_repositories", sa.Boolean(), nullable=True),
        sa.Column("owned_private_repos", sa.Integer(), nullable=True),
        sa.Column("private_gists", sa.Integer(), nullable=True),
        sa.Column("public_gists", sa.Integer(), nullable=True),
        sa.Column("public_repos", sa.Integer(), nullable=True),
        sa.Column("total_private_repos", sa.Integer(), nullable=True),
        sa.Column("two_factor_requirement_enabled", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_gh_organization")),
    )
    op.create_table(
        "repository_project",
        sa.Column("key", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("url", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("type", sa.String(length=255), nullable=True),
        sa.Column("confidentiality", sa.String(length=255), nullable=True),
        sa.Column("source", sa.String(length=255), nullable=True),
        sa.Column("default_permission", sa.String(length=255), nullable=True),
        sa.Column("classification", sa.Integer(), nullable=True),
        sa.Column("classification_reason", sa.Text(), nullable=True),
        sa.Column("access_denied_to_admin", sa.Boolean(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("archived", sa.Boolean(), nullable=True),
        sa.Column("compliant", sa.Boolean(), nullable=True),
        sa.Column("compliance_reason", sa.JSON(), nullable=True),
        sa.Column("last_activity_date", sa.Date(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_project")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("emailAddress", sa.String(length=255), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("external", sa.Boolean(), nullable=True),
        sa.Column("slug", sa.String(length=255), nullable=True),
        sa.Column("remote_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    op.create_table(
        "group",
        sa.Column("source", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("slug", sa.String(length=255), nullable=True),
        sa.Column("remote_id", sa.Integer(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["organization_id"], ["gh_organization.id"], name=op.f("fk_group_organization_id_gh_organization")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_group")),
    )
    op.create_table(
        "repository",
        sa.Column("slug", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("default_branch", sa.String(length=255), nullable=True),
        sa.Column("url", sa.Text(), nullable=True),
        sa.Column("url_ssh", sa.Text(), nullable=True),
        sa.Column("url_http", sa.Text(), nullable=True),
        sa.Column("confidentiality", sa.String(length=255), nullable=True),
        sa.Column("source", sa.String(length=255), nullable=True),
        sa.Column("last_scan_date", sa.DateTime(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("sonarqube_project_key", sa.String(length=255), nullable=True),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("classification", sa.Integer(), nullable=True),
        sa.Column("classification_reason", sa.Text(), nullable=True),
        sa.Column("time_analysis", sa.Integer(), nullable=True),
        sa.Column("access_denied_to_admin", sa.Boolean(), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=True),
        sa.Column("compliant", sa.Boolean(), nullable=True),
        sa.Column("compliance_reason", sa.JSON(), nullable=True),
        sa.Column("archived", sa.Boolean(), nullable=True),
        sa.Column("leak_count", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["organization_id"], ["gh_organization.id"], name=op.f("fk_repository_organization_id_gh_organization")),
        sa.ForeignKeyConstraint(["project_id"], ["repository_project.id"], name=op.f("fk_repository_project_id_repository_project")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository")),
    )
    op.create_table(
        "gitleak",
        sa.Column("lineNumber", sa.Integer(), nullable=True),
        sa.Column("offender", sa.Text(), nullable=True),
        sa.Column("offenderEntropy", sa.String(length=255), nullable=True),
        sa.Column("commit", sa.String(length=255), nullable=True),
        sa.Column("leakURL", sa.Text(), nullable=True),
        sa.Column("rule", sa.String(length=255), nullable=True),
        sa.Column("branch", sa.String(length=255), nullable=True),
        sa.Column("commitMessage", sa.Text(), nullable=True),
        sa.Column("author", sa.String(length=255), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("file", sa.String(length=255), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("tags", sa.String(length=255), nullable=True),
        sa.Column("fixed", sa.Boolean(), nullable=True),
        sa.Column("fixed_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_false_positive", sa.Boolean(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["repository_id"], ["repository.id"], name=op.f("fk_gitleak_repository_id_repository")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_gitleak")),
    )
    op.create_table(
        "repository_branch",
        sa.Column("type", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("users", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
        sa.Column("groups", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
        sa.Column("accessKeys", sa.String(length=255), nullable=True),
        sa.Column("reviewers_required_count", sa.Integer(), nullable=True),
        sa.Column("permissions", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["repository_id"], ["repository.id"], name=op.f("fk_repository_branch_repository_id_repository")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_branch")),
    )
    op.create_table(
        "repository_dependency",
        sa.Column("version", sa.String(length=255), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("chart", sa.String(length=255), nullable=True),
        sa.Column("file_path", sa.String(length=255), nullable=True),
        sa.Column("type", sa.String(length=255), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["repository_id"], ["repository.id"], name=op.f("fk_repository_dependency_repository_id_repository")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_dependency")),
    )
    op.create_table(
        "repository_permission",
        sa.Column(
            "permission",
            sa.Enum(
                "PROJECT_VIEW",
                "REPO_READ",
                "REPO_WRITE",
                "REPO_ADMIN",
                "PROJECT_READ",
                "PROJECT_WRITE",
                "PROJECT_ADMIN",
                "LICENSED_USER",
                "PROJECT_CREATE",
                "ADMIN",
                "SYS_ADMIN",
                "NO_ACCESS",
                name="permissionenum",
            ),
            nullable=True,
        ),
        sa.Column("permissions", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], name=op.f("fk_repository_permission_group_id_group"), ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name=op.f("fk_repository_permission_repository_id_repository"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name=op.f("fk_repository_permission_user_id_user"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_permission")),
    )
    op.create_table(
        "repository_project_permission",
        sa.Column(
            "permission",
            sa.Enum(
                "PROJECT_VIEW",
                "REPO_READ",
                "REPO_WRITE",
                "REPO_ADMIN",
                "PROJECT_READ",
                "PROJECT_WRITE",
                "PROJECT_ADMIN",
                "LICENSED_USER",
                "PROJECT_CREATE",
                "ADMIN",
                "SYS_ADMIN",
                "NO_ACCESS",
                name="rp_permission_enum",
            ),
            nullable=True,
        ),
        sa.Column("permissions", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("repository_project_id", sa.Integer(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], name=op.f("fk_repository_project_permission_group_id_group")),
        sa.ForeignKeyConstraint(["repository_project_id"], ["repository_project.id"], name="fk_rpp_rp", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="fk_rpp_user", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_project_permission")),
    )
    op.create_table(
        "repository_setting",
        sa.Column("type", sa.String(length=255), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("access_keys", sa.String(length=255), nullable=True),
        sa.Column("matcher_id", sa.String(length=255), nullable=True),
        sa.Column("matcher_type", sa.String(length=255), nullable=True),
        sa.Column("matcher_active", sa.Boolean(), nullable=True),
        sa.Column("scope_type", sa.String(length=255), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"], ["repository_project.id"], name=op.f("fk_repository_setting_project_id_repository_project"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name=op.f("fk_repository_setting_repository_id_repository"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_setting")),
    )
    op.create_table(
        "user_group_relation",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], name=op.f("fk_user_group_relation_group_id_group")),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name=op.f("fk_user_group_relation_user_id_user")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_group_relation")),
    )
    op.create_table(
        "notification",
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("leak_id", sa.Integer(), nullable=True),
        sa.Column(
            "permission_type",
            sa.Enum(
                "PROJECT_VIEW",
                "REPO_READ",
                "REPO_WRITE",
                "REPO_ADMIN",
                "PROJECT_READ",
                "PROJECT_WRITE",
                "PROJECT_ADMIN",
                "LICENSED_USER",
                "PROJECT_CREATE",
                "ADMIN",
                "SYS_ADMIN",
                "NO_ACCESS",
                name="permissionenum",
            ),
            nullable=True,
        ),
        sa.Column("content", sa.Text(), nullable=True),
        sa.Column("action_type", sa.Enum("UPDATE", "ADD", "DELETE", name="notificationactionenum"), nullable=True),
        sa.Column("type", sa.Enum("COMPLIANCE", "SETTINGS", "PERMISSIONS", "LEAK", name="notificationenum"), nullable=True),
        sa.Column("notified", sa.Boolean(), nullable=True),
        sa.Column("resolved", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], name=op.f("fk_notification_group_id_group"), ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["leak_id"], ["gitleak.id"], name=op.f("fk_notification_leak_id_gitleak"), ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["project_id"], ["repository_project.id"], name=op.f("fk_notification_project_id_repository_project"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"], ["repository.id"], name=op.f("fk_notification_repository_id_repository"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="fk_notif_user", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_notification")),
    )
    op.create_table(
        "repository_setting_group",
        sa.Column("repository_setting_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], name=op.f("fk_repository_setting_group_group_id_group"), ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["repository_setting_id"],
            ["repository_setting.id"],
            name=op.f("fk_repository_setting_group_repository_setting_id_repository_setting"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_setting_group")),
    )
    op.create_table(
        "repository_setting_user",
        sa.Column("repository_setting_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["repository_setting_id"],
            ["repository_setting.id"],
            name=op.f("fk_repository_setting_user_repository_setting_id_repository_setting"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name=op.f("fk_repository_setting_user_user_id_user"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_repository_setting_user")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("repository_setting_user")
    op.drop_table("repository_setting_group")
    op.drop_table("notification")
    op.drop_table("user_group_relation")
    op.drop_table("repository_setting")
    op.drop_table("repository_project_permission")
    op.drop_table("repository_permission")
    op.drop_table("repository_dependency")
    op.drop_table("repository_branch")
    op.drop_table("gitleak")
    op.drop_table("repository")
    op.drop_table("group")
    op.drop_table("user")
    op.drop_table("repository_project")
    op.drop_table("gh_organization")
    # ### end Alembic commands ###
